// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "ic-indexer-service/models"
)

// NewSaveOrUpdateIcecreamParams creates a new SaveOrUpdateIcecreamParams object
// with the default values initialized.
func NewSaveOrUpdateIcecreamParams() *SaveOrUpdateIcecreamParams {
	var ()
	return &SaveOrUpdateIcecreamParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSaveOrUpdateIcecreamParamsWithTimeout creates a new SaveOrUpdateIcecreamParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSaveOrUpdateIcecreamParamsWithTimeout(timeout time.Duration) *SaveOrUpdateIcecreamParams {
	var ()
	return &SaveOrUpdateIcecreamParams{

		timeout: timeout,
	}
}

// NewSaveOrUpdateIcecreamParamsWithContext creates a new SaveOrUpdateIcecreamParams object
// with the default values initialized, and the ability to set a context for a request
func NewSaveOrUpdateIcecreamParamsWithContext(ctx context.Context) *SaveOrUpdateIcecreamParams {
	var ()
	return &SaveOrUpdateIcecreamParams{

		Context: ctx,
	}
}

// NewSaveOrUpdateIcecreamParamsWithHTTPClient creates a new SaveOrUpdateIcecreamParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSaveOrUpdateIcecreamParamsWithHTTPClient(client *http.Client) *SaveOrUpdateIcecreamParams {
	var ()
	return &SaveOrUpdateIcecreamParams{
		HTTPClient: client,
	}
}

/*SaveOrUpdateIcecreamParams contains all the parameters to send to the API endpoint
for the save or update icecream operation typically these are written to a http.Request
*/
type SaveOrUpdateIcecreamParams struct {

	/*IcecreamClientRequest
	  icecream request

	*/
	IcecreamClientRequest *models.IcecreamClientRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the save or update icecream params
func (o *SaveOrUpdateIcecreamParams) WithTimeout(timeout time.Duration) *SaveOrUpdateIcecreamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the save or update icecream params
func (o *SaveOrUpdateIcecreamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the save or update icecream params
func (o *SaveOrUpdateIcecreamParams) WithContext(ctx context.Context) *SaveOrUpdateIcecreamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the save or update icecream params
func (o *SaveOrUpdateIcecreamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the save or update icecream params
func (o *SaveOrUpdateIcecreamParams) WithHTTPClient(client *http.Client) *SaveOrUpdateIcecreamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the save or update icecream params
func (o *SaveOrUpdateIcecreamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIcecreamClientRequest adds the icecreamClientRequest to the save or update icecream params
func (o *SaveOrUpdateIcecreamParams) WithIcecreamClientRequest(icecreamClientRequest *models.IcecreamClientRequest) *SaveOrUpdateIcecreamParams {
	o.SetIcecreamClientRequest(icecreamClientRequest)
	return o
}

// SetIcecreamClientRequest adds the icecreamClientRequest to the save or update icecream params
func (o *SaveOrUpdateIcecreamParams) SetIcecreamClientRequest(icecreamClientRequest *models.IcecreamClientRequest) {
	o.IcecreamClientRequest = icecreamClientRequest
}

// WriteToRequest writes these params to a swagger request
func (o *SaveOrUpdateIcecreamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IcecreamClientRequest != nil {
		if err := r.SetBodyParam(o.IcecreamClientRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
