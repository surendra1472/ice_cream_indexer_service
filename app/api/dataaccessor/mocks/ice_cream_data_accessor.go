// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import bo "ic-indexer-service/app/model/bo"
import context "context"

import mock "github.com/stretchr/testify/mock"
import request "ic-indexer-service/app/model/request"
import response "ic-indexer-service/app/model/response"

// IceCreamDataAccessor is an autogenerated mock type for the IceCreamDataAccessor type
type IceCreamDataAccessor struct {
	mock.Mock
}

// CreateOrReplaceIcecream provides a mock function with given fields: _a0, _a1
func (_m *IceCreamDataAccessor) CreateOrReplaceIcecream(_a0 context.Context, _a1 bo.ESIcecream) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bo.ESIcecream) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIcecream provides a mock function with given fields: _a0, _a1
func (_m *IceCreamDataAccessor) DeleteIcecream(_a0 context.Context, _a1 request.IcecreamDelete) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.IcecreamDelete) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIcecreamByKey provides a mock function with given fields: _a0, _a1
func (_m *IceCreamDataAccessor) GetIcecreamByKey(_a0 context.Context, _a1 request.IcecreamIndexRequest) (bo.ESIcecream, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bo.ESIcecream
	if rf, ok := ret.Get(0).(func(context.Context, request.IcecreamIndexRequest) bo.ESIcecream); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bo.ESIcecream)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.IcecreamIndexRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIcecreams provides a mock function with given fields: _a0, _a1
func (_m *IceCreamDataAccessor) GetIcecreams(_a0 context.Context, _a1 request.IcecreamFilter) (response.BulkIcecreamIndexResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 response.BulkIcecreamIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.IcecreamFilter) response.BulkIcecreamIndexResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(response.BulkIcecreamIndexResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.IcecreamFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
